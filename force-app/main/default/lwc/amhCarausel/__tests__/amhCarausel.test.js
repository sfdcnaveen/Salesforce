import { createElement } from 'lwc';
import AmhCarausel from 'c/amhCarausel';
import getCarouselList from '@salesforce/apex/AmhCarousel.getCarouselList';
const communityMockData = require("./data/mock-data.json");
const data = communityMockData.data1;
const errorText = communityMockData.errorText;
const errorData = communityMockData.errorData;


const mockNavigate = jest.fn();
const mockGenerate = jest.fn();
jest.mock(
    "@salesforce/apex/AmhCarousel.getCarouselList",
    () => {
        const {
            createApexTestWireAdapter
        } = require("@salesforce/sfdx-lwc-jest");
        return {
            default: createApexTestWireAdapter(jest.fn())
        };
    }, {
    virtual: true
}
);

jest.mock(
    'lightning/navigation',
    () => {
        //-- see the sfdx-lwc-jest implementation for the default mock used without using mocks
        //-- https://github.com/salesforce/sfdx-lwc-jest/blob/master/src/lightning-stubs/navigation/navigation.js

        const result = {};

        result.CurrentPageReference = jest.fn();

        const Navigate = Symbol("Navigate");
        const GenerateUrl = Symbol("GenerateUrl");

        const NavigationMixin = (Base) => {
            return class extends Base {
                constructor() {
                    super();
                    this[Navigate] = mockNavigate;
                    this[GenerateUrl] = mockGenerate;
                }
            }
        };
        NavigationMixin.Navigate = Navigate;
        NavigationMixin.GenerateUrl = GenerateUrl;

        result.NavigationMixin = NavigationMixin;

        return result;
    },
    { virtual: true }
);
const {
    setImmediate
} = require("timers");
function flushPromises() {
    {
        return new Promise((resolve) => setImmediate(resolve));

    }
}
jest.useFakeTimers();
jest.spyOn(global, 'setTimeout');
jest.spyOn(global, 'setInterval');
describe('c-amh-carausel', () => {
    afterEach(() => {
        // The jsdom instance is shared across test cases in a single file so reset the DOM
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        mockNavigate.mockClear();
        mockGenerate.mockClear();
    });

    it('TODO: test case generated by CLI command, please fill in test logic', () => {
        // Arrange
        const element = createElement('c-amh-carausel', {
            is: AmhCarausel
        });

        // Act
        document.body.appendChild(element);
        // Assert
        // const div = element.shadowRoot.querySelector('div');
        expect(1).toBe(1);
    });
    it('Test Case 1', async () => {
        // Arrange
        const element = createElement('c-amh-carausel', {
            is: AmhCarausel
        });

        // Act
        document.body.appendChild(element);
        getCarouselList.emit(data);

        await flushPromises()
        let result = element.getCardsBySection();
        expect(result.navigationType).toBe('standard__webPage');
        expect(result.zero).toBe(0);
        expect(result.error).toBe(undefined);
        expect(result.errorMessage).toBe("Failed to retrieve image URLs");
        expect(result.underScore).toBe('_');
        expect(result.space).toBe(' ');
        expect(result.isPlaying).toBe(true);
        expect(result.intervalId).toBe(1000000000000);
        expect(result.activeIndex).toBe(0);
        expect(result.imageUrls).toStrictEqual([{ "Images__c": "Image_Source__c1", "Title__c": "Title__c1", "Company__c": "SubTitle__c1", "Address__c": "Description__c1", "button_label_text__c": "Button__c1", "UniqueId": "Name1", "UrlLink": "Link_Resource__c1" }, { "Images__c": "Image_Source__c2", "Title__c": "Title__c2", "Company__c": "SubTitle__c2", "Address__c": "Description__c2", "button_label_text__c": "Button__c2", "UniqueId": "Name2", "UrlLink": "Link_Resource__c2" }, { "Images__c": "Image_Source__c3", "Title__c": "Title__c3", "Company__c": "SubTitle__c3", "Address__c": "Description__c3", "button_label_text__c": "Button__c3", "UniqueId": "Name3", "UrlLink": "Link_Resource__c3" }]);
        expect(result.List).toStrictEqual([{ "Image_Source__c": "Image_Source__c1", "Title__c": "Title__c1", "SubTitle__c": "SubTitle__c1", "Description__c": "Description__c1", "Button__c": "Button__c1", "Name": "Name1", "Link_Resource__c": "Link_Resource__c1" }, { "Image_Source__c": "Image_Source__c2", "Title__c": "Title__c2", "SubTitle__c": "SubTitle__c2", "Description__c": "Description__c2", "Button__c": "Button__c2", "Name": "Name2", "Link_Resource__c": "Link_Resource__c2" }, { "Image_Source__c": "Image_Source__c3", "Title__c": "Title__c3", "SubTitle__c": "SubTitle__c3", "Description__c": "Description__c3", "Button__c": "Button__c3", "Name": "Name3", "Link_Resource__c": "Link_Resource__c3" }]);
        expect(result.playPauseLabel).toBe('❚❚');
        expect(result.currentImageUrl).toBe('Image_Source__c1');
        expect(result.currentImageTitle).toBe('Title__c1');
        expect(result.currentImageCompany).toBe('SubTitle__c1');
        expect(result.currentImageAddress).toBe('Description__c1');
        expect(result.CurrentSlideButtonLabel).toBe('Button__c1');
        expect(result.roundButtonClass).toBe('.round-button');
        expect(result.clicked).toBe('clicked');
        expect(result.nTwoFifty).toBe(250);
        expect(result.nThreeThousand).toBe(3000);
        expect(result.currentImageLink).toBe('Link_Resource__c1');
        // Assert
        // const div = element.shadowRoot.querySelector('div');
        expect(1).toBe(1);
    });
    it('Test Case 2', async () => {
        // Arrange
        const element = createElement('c-amh-carausel', {
            is: AmhCarausel
        });

        // Act
        document.body.appendChild(element);
        getCarouselList.emit(data);
        await flushPromises();
        let html = element.shadowRoot.querySelectorAll("button");
        html[4].click();

        await flushPromises();
        let result = element.getCardsBySection();
        expect(result.activeIndex).toBe(2);

        jest.advanceTimersByTime(10000);
        expect(jest.fn()).toHaveBeenCalledTimes(0);
        // Assert
        // const div = element.shadowRoot.querySelector('div');
        expect(1).toBe(1);
    });

    it('Test Case 3', async () => {
        // Arrange
        const element = createElement('c-amh-carausel', {
            is: AmhCarausel
        });

        // Act
        document.body.appendChild(element);
        getCarouselList.emit(errorData);
        await flushPromises();
        let html = element.shadowRoot.querySelectorAll("button");
        html[0].click();

        await flushPromises();
        let result = element.getCardsBySection();
        expect(result.isFalse).toBe(false);
        expect(mockNavigate).toHaveBeenCalled();
        expect(mockNavigate).toHaveBeenCalledTimes(1);

        // Assert
        // const div = element.shadowRoot.querySelector('div');
        expect(1).toBe(1);
    });
    it('Test Case 4', async () => {
        // Arrange
        const element = createElement('c-amh-carausel', {
            is: AmhCarausel
        });

        // Act
        document.body.appendChild(element);
        getCarouselList.emit(errorData);
        await flushPromises();
        let html = element.shadowRoot.querySelectorAll("button");
        html[1].click();

        await flushPromises();
        let result = element.getCardsBySection();
        expect(result.isPlaying).toBe(false);
        expect(result.playPauseLabel).toBe('▶');
        expect(result.intervalId).toBe(1000000000009);
        expect(result.activeIndex).toBe(0);


        let htmls = element.shadowRoot.querySelectorAll("button");
        htmls[1].click();

        await flushPromises();
        result = element.getCardsBySection();
        expect(result.isPlaying).toBe(true);
        expect(result.intervalId).toBe(1000000000010);
        expect(result.activeIndex).toBe(0);
        jest.clearAllTimers()
        await flushPromises();
        // Assert
        // const div = element.shadowRoot.querySelector('div');
        expect(1).toBe(1);
    });
    it('Test Case With Error', async () => {
        // Arrange
        const element = createElement('c-amh-carausel', {
            is: AmhCarausel
        });

        // Act
        document.body.appendChild(element);
        getCarouselList.error(errorText);
        await flushPromises()
        let result = element.getCardsBySection();
        expect(result.errorMessage).toBe('Failed to retrieve image URLs');
        expect(result.error).toBe('Failed to retrieve image URLs[object Object]');
        expect(result.imageUrls).toStrictEqual([]);

        // Assert
        // const div = element.shadowRoot.querySelector('div');
        expect(1).toBe(1);
    });
    it('Test Case 5', async () => {
        // Arrange
        const element = createElement('c-amh-carausel', {
            is: AmhCarausel
        });

        // Act
        document.body.appendChild(element);
        getCarouselList.emit(data);
        const callback = jest.fn();
        element.intervalId = callback;
        element.nThreeThousand = 0;
        expect(callback).not.toHaveBeenCalled();

        await flushPromises();
        let html = element.shadowRoot.querySelectorAll("button");
        html[1].click();
        
        await flushPromises();
        let result = element.getCardsBySection();
        
        let htmls = element.shadowRoot.querySelectorAll("button");
        htmls[1].click();

        await flushPromises();
        result = element.getCardsBySection();
        expect(result.isPlaying).toBe(true);
        expect(result.intervalId).toBe(1000000000012);
        expect(result.activeIndex).toBe(0);
        await flushPromises();
        // Assert
        // const div = element.shadowRoot.querySelector('div');
        expect(1).toBe(1);
    });
});